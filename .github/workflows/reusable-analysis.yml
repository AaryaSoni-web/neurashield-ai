name: Reusable NeuraShield Analysis

on:
  workflow_call:
    inputs:
      source-repo:
        description: 'Source repository (owner/repo)'
        required: true
        type: string
      pr-number:
        description: 'Pull request number'
        required: false
        type: number
      issue-number:
        description: 'Issue number'
        required: false
        type: number
    secrets:
      OPENAI_API_KEY:
        description: 'OpenAI API Key for analysis'
        required: true

jobs:
  analyze:
    name: Analyze Code
    runs-on: ubuntu-latest
    
    # NO permissions block here - inherited from calling workflow
    
    steps:
      - name: Checkout NeuraShield AI
        uses: actions/checkout@v4
        with:
          repository: AaryaSoni-web/neurashield-ai
          path: neurashield-ai
      
      - name: Checkout Source Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.source-repo }}
          path: source-code
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Dependencies
        working-directory: neurashield-ai
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run NeuraShield Analysis
        working-directory: neurashield-ai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python src/main.py \
            --source-path ../source-code \
            --output ../neurashield-report.json
      
      - name: Save Analysis Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: neurashield-report
          path: |
            neurashield-report.json
            neurashield-report.txt
          retention-days: 30
      
      - name: Post Analysis Comment
        uses: actions/github-script@v7
        if: always() && inputs.pr-number
        continue-on-error: false
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let commentBody = '## üõ°Ô∏è NeuraShield AI - Security Analysis Report\n\n';
            
            try {
              // Read the TEXT report file for complete details
              if (fs.existsSync('neurashield-report.txt')) {
                const textReport = fs.readFileSync('neurashield-report.txt', 'utf8');
                
                console.log('‚úÖ Text report file found');
                console.log(`Report length: ${textReport.length} characters`);
                
                // Post the FULL report in a code block
                commentBody += '```\n';
                commentBody += textReport;
                commentBody += '\n```\n\n';
                commentBody += '---\n';
                commentBody += 'üì• **Download Reports:** [JSON + TXT files available in workflow artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n';
                commentBody += 'üîó *Powered by [NeuraShield AI](https://github.com/AaryaSoni-web/neurashield-ai)*';
                
              } else if (fs.existsSync('neurashield-report.json')) {
                // Fallback to JSON summary
                console.log('‚ö†Ô∏è Text report not found, using JSON');
                const report = JSON.parse(fs.readFileSync('neurashield-report.json', 'utf8'));
                const stats = report.statistics || {};
                
                commentBody += `${report.summary || 'Analysis completed'}\n\n`;
                commentBody += '### üìä Summary\n';
                commentBody += `- Files: ${stats.files_analyzed || 0}/${stats.total_python_files || 0}\n`;
                commentBody += `- Lines: ${stats.total_lines || 0}\n`;
                commentBody += `- Score: ${stats.security_score || 0}/100\n\n`;
                commentBody += '### ‚ö†Ô∏è Issues\n';
                commentBody += `- üî¥ Critical: ${stats.issues?.critical || 0}\n`;
                commentBody += `- üü† High: ${stats.issues?.high || 0}\n`;
                commentBody += `- üü° Medium: ${stats.issues?.medium || 0}\n`;
                
              } else {
                console.error('‚ùå No report files found!');
                commentBody += '‚ùå **Error:** Report files not found.\n\n';
                commentBody += 'Please check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.';
              }
              
            } catch (error) {
              console.error('Error reading report:', error);
              commentBody += '‚ùå **Error loading report:** ' + error.message;
            }
            
            // Post the comment
            const prNumber = ${{ inputs.pr-number }};
            console.log(`Posting comment to PR #${prNumber}`);
            console.log(`Repository: ${context.repo.owner}/${context.repo.repo}`);
            console.log(`Comment length: ${commentBody.length} characters`);
            
            try {
              const result = await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
              console.log('‚úÖ Comment posted successfully!');
              console.log(`Comment ID: ${result.data.id}`);
              console.log(`Comment URL: ${result.data.html_url}`);
            } catch (error) {
              console.error('‚ùå Failed to post comment:', error.message);
              if (error.status) console.error(`HTTP Status: ${error.status}`);
              throw error;
            }
