name: Reusable NeuraShield Analysis

on:
  workflow_call:
    inputs:
      source-repo:
        description: 'Source repository (owner/repo)'
        required: true
        type: string
      pr-number:
        description: 'Pull request number'
        required: false
        type: number
      issue-number:
        description: 'Issue number'
        required: false
        type: number
    secrets:
      OPENAI_API_KEY:
        description: 'OpenAI API Key for analysis'
        required: true

jobs:
  analyze:
    name: Analyze Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout NeuraShield AI
        uses: actions/checkout@v4
        with:
          repository: AaryaSoni-web/neurashield-ai
          path: neurashield-ai
      
      - name: Checkout Source Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.source-repo }}
          path: source-code
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Dependencies
        working-directory: neurashield-ai
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run NeuraShield Analysis
        working-directory: neurashield-ai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python src/main.py \
            --source-path ../source-code \
            --output ../neurashield-report.json
      
      - name: Save Analysis Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: neurashield-report
          path: |
            neurashield-report.json
            neurashield-report.txt
          retention-days: 30
      
      - name: Post Analysis Comment
        uses: actions/github-script@v7
        if: always() && inputs.pr-number
        continue-on-error: false
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read analysis results
            let analysisData;
            try {
              const rawData = fs.readFileSync('neurashield-results.json', 'utf8');
              analysisData = JSON.parse(rawData);
            } catch (error) {
              console.error('Error reading analysis results:', error);
              return;
            }

            // Helper function to map CVSS to severity
            function getCvsSeverity(cvssScore) {
              if (cvssScore >= 9.0) return 'CRITICAL';
              if (cvssScore >= 7.0) return 'HIGH';
              if (cvssScore >= 4.0) return 'MEDIUM';
              if (cvssScore >= 0.1) return 'LOW';
              return 'NONE';
            }

            // Deduplicate issues by file + CWE
            const uniqueIssues = {};
            const allIssues = [
              ...(analysisData.bugs || []),
              ...(analysisData.vulnerabilities || [])
            ];

            for (const issue of allIssues) {
              const key = `${issue.file}_${issue.cwe || 'UNKNOWN'}`;
              if (!uniqueIssues[key]) {
                // Determine severity from CVSS if available
                const severity = issue.cvss_score 
                  ? getCvsSeverity(issue.cvss_score)
                  : (issue.severity || 'MEDIUM').toUpperCase();
                
                uniqueIssues[key] = {
                  ...issue,
                  severity: severity
                };
              }
            }

            const issues = Object.values(uniqueIssues);

            // Count by severity
            const severityCounts = {
              CRITICAL: 0,
              HIGH: 0,
              MEDIUM: 0,
              LOW: 0
            };

            issues.forEach(issue => {
              const severity = issue.severity || 'MEDIUM';
              if (severityCounts.hasOwnProperty(severity)) {
                severityCounts[severity]++;
              }
            });

            // Determine overall risk
            let overallRisk = 'LOW';
            if (severityCounts.CRITICAL > 0) {
              overallRisk = 'CRITICAL';
            } else if (severityCounts.HIGH > 0) {
              overallRisk = 'HIGH';
            } else if (severityCounts.MEDIUM > 0) {
              overallRisk = 'MEDIUM';
            }

            // Format security score correctly (0-10 scale)
            const securityScore = analysisData.security_score || 0;
            const scoreDisplay = securityScore.toFixed(1);

            // Determine risk emoji
            const riskEmoji = {
              'CRITICAL': '🔴',
              'HIGH': '🟠',
              'MEDIUM': '🟡',
              'LOW': '🟢'
            }[overallRisk] || '⚪';

            // Build the comment
            let comment = `## 🛡️ NeuraShield AI - Security Analysis Report\n\n`;
            
            // Summary Section
            comment += `### 📊 Analysis Summary\n\n`;
            comment += `- **Files Analyzed:** ${analysisData.files_analyzed || 0}/${analysisData.total_files || 0}\n`;
            comment += `- **Total Lines:** ${analysisData.total_lines || 0}\n`;
            comment += `- **Security Score:** ${scoreDisplay}/10\n`;
            comment += `- **Timestamp:** ${analysisData.timestamp || new Date().toISOString()}\n\n`;

            // Issues Summary
            comment += `### ⚠️ Issues Found\n\n`;
            comment += `**Overall Risk:** ${riskEmoji} **${overallRisk}**\n\n`;
            
            comment += `| Severity | Count |\n`;
            comment += `|----------|-------|\n`;
            comment += `| 🔴 Critical | ${severityCounts.CRITICAL} |\n`;
            comment += `| 🟠 High | ${severityCounts.HIGH} |\n`;
            comment += `| 🟡 Medium | ${severityCounts.MEDIUM} |\n`;
            comment += `| 🔵 Low | ${severityCounts.LOW} |\n`;
            comment += `| **Total** | **${issues.length}** |\n\n`;

            // Detailed Issues
            if (issues.length > 0) {
              // Group by severity
              const criticalIssues = issues.filter(i => i.severity === 'CRITICAL');
              const highIssues = issues.filter(i => i.severity === 'HIGH');
              const mediumIssues = issues.filter(i => i.severity === 'MEDIUM');
              const lowIssues = issues.filter(i => i.severity === 'LOW');

              if (criticalIssues.length > 0) {
                comment += `### 🔴 Critical Issues\n\n`;
                criticalIssues.forEach((issue, index) => {
                  comment += `#### ${index + 1}. ${issue.type || 'Security Issue'}\n`;
                  comment += `- **File:** \`${issue.file}\`\n`;
                  if (issue.cvss_score) {
                    comment += `- **CVSS Score:** ${issue.cvss_score}/10\n`;
                  }
                  if (issue.cwe) {
                    comment += `- **CWE:** ${issue.cwe}\n`;
                  }
                  comment += `- **Description:** ${issue.description || 'No description available'}\n`;
                  if (issue.fix) {
                    comment += `- **Fix:** ${issue.fix}\n`;
                  }
                  comment += `\n`;
                });
              }

              if (highIssues.length > 0) {
                comment += `### 🟠 High Severity Issues\n\n`;
                highIssues.forEach((issue, index) => {
                  comment += `#### ${index + 1}. ${issue.type || 'Security Issue'}\n`;
                  comment += `- **File:** \`${issue.file}\`\n`;
                  if (issue.cvss_score) {
                    comment += `- **CVSS Score:** ${issue.cvss_score}/10\n`;
                  }
                  if (issue.cwe) {
                    comment += `- **CWE:** ${issue.cwe}\n`;
                  }
                  comment += `- **Description:** ${issue.description || 'No description available'}\n`;
                  if (issue.fix) {
                    comment += `- **Fix:** ${issue.fix}\n`;
                  }
                  comment += `\n`;
                });
              }

              if (mediumIssues.length > 0) {
                comment += `### 🟡 Medium Severity Issues\n\n`;
                mediumIssues.forEach((issue, index) => {
                  comment += `#### ${index + 1}. ${issue.type || 'Security Issue'}\n`;
                  comment += `- **File:** \`${issue.file}\`\n`;
                  if (issue.cwe) {
                    comment += `- **CWE:** ${issue.cwe}\n`;
                  }
                  comment += `- **Description:** ${issue.description || 'No description available'}\n`;
                  if (issue.fix) {
                    comment += `- **Fix:** ${issue.fix}\n`;
                  }
                  comment += `\n`;
                });
              }
            }

            // Recommendations
            comment += `### 📋 Recommendations\n\n`;
            comment += `- Review all critical and high severity issues immediately\n`;
            comment += `- Implement automated code quality checks in CI/CD pipeline\n`;
            comment += `- Use security linters: \`bandit\`, \`pylint\`, \`flake8\`\n`;
            comment += `- Setup pre-commit hooks for code analysis\n`;
            comment += `- Regular security audits and penetration testing\n`;
            comment += `- Implement input validation and output encoding\n`;
            if (analysisData.recommendations && Array.isArray(analysisData.recommendations)) {
              analysisData.recommendations.forEach(rec => {
                comment += `- ${rec}\n`;
              });
            }
            comment += `\n`;

            // Immediate Actions
            if (severityCounts.CRITICAL > 0 || severityCounts.HIGH > 0) {
              comment += `### ⚡ Immediate Actions Required\n\n`;
              if (severityCounts.CRITICAL > 0) {
                comment += `- ⚠️ Address ${severityCounts.CRITICAL} critical issue(s)\n`;
              }
              if (severityCounts.HIGH > 0) {
                comment += `- ⚠️ Address ${severityCounts.HIGH} high severity issue(s)\n`;
              }
              comment += `- 📝 Conduct thorough code review\n`;
              comment += `- 🔄 Update dependencies\n\n`;
            }

            // Merge Recommendation
            comment += `### 🎯 Merge Recommendation\n\n`;
            if (severityCounts.CRITICAL > 0) {
              comment += `🛑 **DO NOT MERGE** - Critical security issues must be resolved first.\n\n`;
            } else if (severityCounts.HIGH > 0) {
              comment += `⚠️ **REVIEW CAREFULLY** - High severity issues detected.\n\n`;
            } else if (severityCounts.MEDIUM > 0) {
              comment += `⚠️ **REVIEW RECOMMENDED** - Medium severity issues detected.\n\n`;
            } else {
              comment += `✅ **SAFE TO MERGE** - No critical issues detected.\n\n`;
            }

            // Footer
            comment += `---\n`;
            comment += `📥 **Download Full Reports** (JSON + TXT) from workflow artifacts\n\n`;
            comment += `🔗 *Powered by NeuraShield AI*\n`;

            // Post comment
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              console.log('Successfully posted comment to PR');
            } catch (error) {
              console.error('Error posting comment:', error);
              core.setFailed(`Failed to post comment: ${error.message}`);
            }
