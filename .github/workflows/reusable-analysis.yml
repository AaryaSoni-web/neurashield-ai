name: NeuraShield AI - Reusable Security Analysis

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.x'
    secrets:
      GITHUB_TOKEN:
        required: true

jobs:
  security-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install NeuraShield Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai anthropic google-generativeai requests pyyaml

      - name: Run NeuraShield Analysis
        id: analysis
        run: |
          python -m neurashield.analyzer
        continue-on-error: true

      - name: Generate PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read analysis results
            let analysisData;
            try {
              const rawData = fs.readFileSync('neurashield_results.json', 'utf8');
              analysisData = JSON.parse(rawData);
            } catch (error) {
              console.error('Error reading analysis results:', error);
              return;
            }

            // Helper function to map CVSS to severity
            function getCvsSeverity(cvssScore) {
              if (cvssScore >= 9.0) return 'CRITICAL';
              if (cvssScore >= 7.0) return 'HIGH';
              if (cvssScore >= 4.0) return 'MEDIUM';
              if (cvssScore >= 0.1) return 'LOW';
              return 'NONE';
            }

            // Deduplicate issues by file + CWE
            const uniqueIssues = {};
            const allIssues = [
              ...(analysisData.bugs || []),
              ...(analysisData.vulnerabilities || [])
            ];

            for (const issue of allIssues) {
              const key = `${issue.file}_${issue.cwe || 'UNKNOWN'}`;
              if (!uniqueIssues[key]) {
                // Determine severity from CVSS if available
                const severity = issue.cvss_score 
                  ? getCvsSeverity(issue.cvss_score)
                  : (issue.severity || 'MEDIUM').toUpperCase();
                
                uniqueIssues[key] = {
                  ...issue,
                  severity: severity
                };
              }
            }

            const issues = Object.values(uniqueIssues);

            // Count by severity
            const severityCounts = {
              CRITICAL: 0,
              HIGH: 0,
              MEDIUM: 0,
              LOW: 0
            };

            issues.forEach(issue => {
              const severity = issue.severity || 'MEDIUM';
              if (severityCounts.hasOwnProperty(severity)) {
                severityCounts[severity]++;
              }
            });

            // Determine overall risk
            let overallRisk = 'LOW';
            if (severityCounts.CRITICAL > 0) {
              overallRisk = 'CRITICAL';
            } else if (severityCounts.HIGH > 0) {
              overallRisk = 'HIGH';
            } else if (severityCounts.MEDIUM > 0) {
              overallRisk = 'MEDIUM';
            }

            // Format security score correctly (0-10 scale)
            const securityScore = analysisData.security_score || 0;
            const scoreDisplay = securityScore.toFixed(1);

            // Determine risk emoji
            const riskEmoji = {
              'CRITICAL': 'üî¥',
              'HIGH': 'üü†',
              'MEDIUM': 'üü°',
              'LOW': 'üü¢'
            }[overallRisk] || '‚ö™';

            // Build the comment
            let comment = `## üõ°Ô∏è NeuraShield AI - Security Analysis Report\n\n`;
            
            // Summary Section
            comment += `### üìä Analysis Summary\n\n`;
            comment += `- **Files Analyzed:** ${analysisData.files_analyzed || 0}/${analysisData.total_files || 0}\n`;
            comment += `- **Total Lines:** ${analysisData.total_lines || 0}\n`;
            comment += `- **Security Score:** ${scoreDisplay}/10\n`;
            comment += `- **Timestamp:** ${analysisData.timestamp || new Date().toISOString()}\n\n`;

            // Issues Summary
            comment += `### ‚ö†Ô∏è Issues Found\n\n`;
            comment += `**Overall Risk:** ${riskEmoji} **${overallRisk}**\n\n`;
            
            comment += `| Severity | Count |\n`;
            comment += `|----------|-------|\n`;
            comment += `| üî¥ Critical | ${severityCounts.CRITICAL} |\n`;
            comment += `| üü† High | ${severityCounts.HIGH} |\n`;
            comment += `| üü° Medium | ${severityCounts.MEDIUM} |\n`;
            comment += `| üîµ Low | ${severityCounts.LOW} |\n`;
            comment += `| **Total** | **${issues.length}** |\n\n`;

            // Detailed Issues
            if (issues.length > 0) {
              // Group by severity
              const criticalIssues = issues.filter(i => i.severity === 'CRITICAL');
              const highIssues = issues.filter(i => i.severity === 'HIGH');
              const mediumIssues = issues.filter(i => i.severity === 'MEDIUM');
              const lowIssues = issues.filter(i => i.severity === 'LOW');

              if (criticalIssues.length > 0) {
                comment += `### üî¥ Critical Issues\n\n`;
                criticalIssues.forEach((issue, index) => {
                  comment += `#### ${index + 1}. ${issue.type || 'Security Issue'}\n`;
                  comment += `- **File:** \`${issue.file}\`\n`;
                  if (issue.cvss_score) {
                    comment += `- **CVSS Score:** ${issue.cvss_score}/10\n`;
                  }
                  if (issue.cwe) {
                    comment += `- **CWE:** ${issue.cwe}\n`;
                  }
                  comment += `- **Description:** ${issue.description || 'No description available'}\n`;
                  if (issue.fix) {
                    comment += `- **Fix:** ${issue.fix}\n`;
                  }
                  comment += `\n`;
                });
              }

              if (highIssues.length > 0) {
                comment += `### üü† High Severity Issues\n\n`;
                highIssues.forEach((issue, index) => {
                  comment += `#### ${index + 1}. ${issue.type || 'Security Issue'}\n`;
                  comment += `- **File:** \`${issue.file}\`\n`;
                  if (issue.cvss_score) {
                    comment += `- **CVSS Score:** ${issue.cvss_score}/10\n`;
                  }
                  if (issue.cwe) {
                    comment += `- **CWE:** ${issue.cwe}\n`;
                  }
                  comment += `- **Description:** ${issue.description || 'No description available'}\n`;
                  if (issue.fix) {
                    comment += `- **Fix:** ${issue.fix}\n`;
                  }
                  comment += `\n`;
                });
              }

              if (mediumIssues.length > 0) {
                comment += `### üü° Medium Severity Issues\n\n`;
                mediumIssues.forEach((issue, index) => {
                  comment += `#### ${index + 1}. ${issue.type || 'Security Issue'}\n`;
                  comment += `- **File:** \`${issue.file}\`\n`;
                  if (issue.cwe) {
                    comment += `- **CWE:** ${issue.cwe}\n`;
                  }
                  comment += `- **Description:** ${issue.description || 'No description available'}\n`;
                  if (issue.fix) {
                    comment += `- **Fix:** ${issue.fix}\n`;
                  }
                  comment += `\n`;
                });
              }
            }

            // Recommendations
            comment += `### üìã Recommendations\n\n`;
            comment += `- Review all critical and high severity issues immediately\n`;
            comment += `- Implement automated code quality checks in CI/CD pipeline\n`;
            comment += `- Use security linters: \`bandit\`, \`pylint\`, \`flake8\`\n`;
            comment += `- Setup pre-commit hooks for code analysis\n`;
            comment += `- Regular security audits and penetration testing\n`;
            comment += `- Implement input validation and output encoding\n`;
            if (analysisData.recommendations && Array.isArray(analysisData.recommendations)) {
              analysisData.recommendations.forEach(rec => {
                comment += `- ${rec}\n`;
              });
            }
            comment += `\n`;

            // Immediate Actions
            if (severityCounts.CRITICAL > 0 || severityCounts.HIGH > 0) {
              comment += `### ‚ö° Immediate Actions Required\n\n`;
              if (severityCounts.CRITICAL > 0) {
                comment += `- ‚ö†Ô∏è Address ${severityCounts.CRITICAL} critical issue(s)\n`;
              }
              if (severityCounts.HIGH > 0) {
                comment += `- ‚ö†Ô∏è Address ${severityCounts.HIGH} high severity issue(s)\n`;
              }
              comment += `- üìù Conduct thorough code review\n`;
              comment += `- üîÑ Update dependencies\n\n`;
            }

            // Merge Recommendation
            comment += `### üéØ Merge Recommendation\n\n`;
            if (severityCounts.CRITICAL > 0) {
              comment += `üõë **DO NOT MERGE** - Critical security issues must be resolved first.\n\n`;
            } else if (severityCounts.HIGH > 0) {
              comment += `‚ö†Ô∏è **REVIEW CAREFULLY** - High severity issues detected.\n\n`;
            } else if (severityCounts.MEDIUM > 0) {
              comment += `‚ö†Ô∏è **REVIEW RECOMMENDED** - Medium severity issues detected.\n\n`;
            } else {
              comment += `‚úÖ **SAFE TO MERGE** - No critical issues detected.\n\n`;
            }

            // Footer
            comment += `---\n`;
            comment += `üì• **Download Full Reports** (JSON + TXT) from workflow artifacts\n\n`;
            comment += `üîó *Powered by NeuraShield AI*\n`;

            // Post comment
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              console.log('Successfully posted comment to PR');
            } catch (error) {
              console.error('Error posting comment:', error);
              core.setFailed(`Failed to post comment: ${error.message}`);
            }

      - name: Upload Analysis Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: neurashield-reports
          path: |
            neurashield_results.json
            neurashield_report.txt
          retention-days: 30

      - name: Check Security Status
        if: always()
        run: |
          # Fail the workflow if critical issues are found
          if [ -f "neurashield_results.json" ]; then
            CRITICAL_COUNT=$(python -c "import json; data=json.load(open('neurashield_results.json')); print(sum(1 for i in data.get('bugs', []) + data.get('vulnerabilities', []) if i.get('cvss_score', 0) >= 9.0))")
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "‚ùå Found $CRITICAL_COUNT critical security issue(s)"
              exit 1
            fi
          fi
