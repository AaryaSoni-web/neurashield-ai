name: Reusable NeuraShield Analysis

on:
  workflow_call:
    inputs:
      source-repo:
        description: 'Source repository (owner/repo)'
        required: true
        type: string
      pr-number:
        description: 'Pull request number'
        required: false
        type: number
      issue-number:
        description: 'Issue number'
        required: false
        type: number
    secrets:
      OPENAI_API_KEY:
        description: 'OpenAI API Key for analysis'
        required: true

jobs:
  analyze:
    name: Analyze Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout NeuraShield AI
        uses: actions/checkout@v4
        with:
          repository: AaryaSoni-web/neurashield-ai
          path: neurashield-ai
      
      - name: Checkout Source Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.source-repo }}
          path: source-code
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Dependencies
        working-directory: neurashield-ai
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run NeuraShield Analysis
        working-directory: neurashield-ai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python src/main.py \
            --source-path ../source-code \
            --output ../neurashield-report.json
      
      - name: Save Analysis Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: neurashield-report
          path: |
            neurashield-report.json
            neurashield-report.txt
          retention-days: 30
      
      - name: Post Analysis Comment
        uses: actions/github-script@v7
        if: always() && (inputs.pr-number || inputs.issue-number)
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            let reportBody = '‚ö†Ô∏è Analysis completed. Check workflow logs for details.';
            
            try {
              // Read the TEXT report file instead of JSON for full details
              if (fs.existsSync('neurashield-report.txt')) {
                const textReport = fs.readFileSync('neurashield-report.txt', 'utf8');
                
                // Format the text report for GitHub markdown
                reportBody = '## üõ°Ô∏è NeuraShield AI - Security Analysis Report\n\n';
                reportBody += '```\n';
                reportBody += textReport;
                reportBody += '\n```\n';
                reportBody += '\n---\n';
                reportBody += '*üì• Full reports (JSON + TXT) are available in the [workflow artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})*\n';
                reportBody += '*üîó Powered by [NeuraShield AI](https://github.com/AaryaSoni-web/neurashield-ai)*';
                
                console.log('‚úÖ Text report loaded and formatted');
              } else if (fs.existsSync('neurashield-report.json')) {
                // Fallback to JSON summary if text file not found
                const report = JSON.parse(fs.readFileSync('neurashield-report.json', 'utf8'));
                const stats = report.statistics || {};
                
                reportBody = '## üõ°Ô∏è NeuraShield AI Analysis\n\n';
                reportBody += `${report.summary || 'Analysis completed'}\n\n`;
                reportBody += '### üìä Analysis Summary\n';
                reportBody += `- **Files Analyzed:** ${stats.files_analyzed || 0}/${stats.total_python_files || 0}\n`;
                reportBody += `- **Total Lines:** ${stats.total_lines || 0}\n`;
                reportBody += `- **Security Score:** ${stats.security_score || 0}/100\n\n`;
                reportBody += '### ‚ö†Ô∏è Issues Found\n';
                reportBody += `- üî¥ Critical: ${stats.issues?.critical || 0}\n`;
                reportBody += `- üü† High: ${stats.issues?.high || 0}\n`;
                reportBody += `- üü° Medium: ${stats.issues?.medium || 0}\n\n`;
                reportBody += '‚ö†Ô∏è **Note:** Full detailed report not found. Check workflow logs.\n';
                
                console.log('‚úÖ JSON report loaded (text report not found)');
              } else {
                console.log('‚ö†Ô∏è No report files found');
              }
            } catch (error) {
              console.error('Error reading report:', error.message);
              reportBody = '‚ùå **NeuraShield Analysis Failed**\n\n';
              reportBody += 'Could not load analysis report. Please check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.';
            }
            
            const issueNumber = ${{ inputs.pr-number || inputs.issue-number || 'null' }};
            
            if (!issueNumber) {
              console.log('No issue/PR number, skipping comment');
              return;
            }
            
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: reportBody
              });
              console.log('‚úÖ Comment posted successfully');
            } catch (error) {
              console.error('Failed to post comment:', error.message);
              throw error;
            }
