name: NeuraShield Reusable Analysis

on:
  workflow_call:
    secrets:
      OPENAI_API_KEY:
        description: 'OpenAI API key for NeuraShield analysis'
        required: true
    inputs:
      python_version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.11'
      analysis_type:
        description: 'Type of analysis to run'
        required: false
        type: string
        default: 'all'
      fail_on_critical:
        description: 'Whether to fail on critical issues'
        required: false
        type: boolean
        default: true

jobs:
  neurashield-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      
      - name: Checkout NeuraShield AI engine
        uses: actions/checkout@v4
        with:
          repository: AaryaSoni-web/neurashield-ai
          path: neurashield-engine
          ref: main
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}
          cache: 'pip'
      
      - name: Install NeuraShield dependencies
        run: |
          pip install --upgrade pip
          pip install -r neurashield-engine/requirements.txt
        continue-on-error: false
      
      - name: Initialize ChromaDB vector store
        run: |
          if [ ! -d "neurashield-engine/phase_1/chroma_db" ]; then
            echo "üì¶ ChromaDB not found. Initializing vector store..."
            cd neurashield-engine
            python phase1_pipeline.py
            cd ..
          else
            echo "‚úÖ Using existing ChromaDB"
          fi
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        continue-on-error: false
      
      - name: Get changed Python files
        id: changed-files
        uses: tj-actions/changed-files@v42
        with:
          files: |
            **/*.py
            !.github/**
            !.githooks/**
            !**/test_*.py
            !**/tests/**
      
      - name: Display changed files
        run: |
          if [ "${{ steps.changed-files.outputs.any_changed }}" == "true" ]; then
            echo "üîç Changed Python files detected:"
            echo "${{ steps.changed-files.outputs.all_changed_files }}"
          else
            echo "‚ö†Ô∏è No Python files changed in this PR"
          fi
      
      - name: Run NeuraShield AI analysis
        if: steps.changed-files.outputs.any_changed == 'true'
        id: analysis
        run: |
          export PYTHONPATH=${{ github.workspace }}/neurashield-engine:$PYTHONPATH
          
          echo "üõ°Ô∏è Starting NeuraShield AI analysis..."
          echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
          
          cd neurashield-engine
          
          # Run analysis
          python .github/scripts/pr_analyzer.py ${{ steps.changed-files.outputs.all_changed_files }}
          
          # Check if files were created
          if [ -f "pr_analysis_results.json" ]; then
            echo "‚úÖ Results file created"
            cp pr_analysis_results.json ${{ github.workspace }}/
          else
            echo "‚ùå ERROR: Results file not created"
            exit 1
          fi
          
          if [ -f "pr_analysis_report.md" ]; then
            echo "‚úÖ Report file created"
            cp pr_analysis_report.md ${{ github.workspace }}/
          else
            echo "‚ùå ERROR: Report file not created"
            exit 1
          fi
          
          cd ${{ github.workspace }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        continue-on-error: false
      
      - name: Verify analysis files
        if: steps.changed-files.outputs.any_changed == 'true' && always()
        run: |
          echo "Checking generated files..."
          ls -lah ${{ github.workspace }}/pr_analysis* || echo "‚ùå No analysis files found"
          
          if [ -f "${{ github.workspace }}/pr_analysis_report.md" ]; then
            echo "Report file size:"
            wc -l ${{ github.workspace }}/pr_analysis_report.md
          fi
      
      - name: Post analysis report as PR comment
        if: steps.changed-files.outputs.any_changed == 'true' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const reportPath = path.join(process.env.GITHUB_WORKSPACE, 'pr_analysis_report.md');
              console.log('Looking for report at:', reportPath);
              
              if (!fs.existsSync(reportPath)) {
                console.log('Report file not found. Creating fallback message...');
                
                const resultsPath = path.join(process.env.GITHUB_WORKSPACE, 'pr_analysis_results.json');
                let message = '‚ö†Ô∏è NeuraShield AI analysis completed, but report generation had issues.\n\n';
                
                if (fs.existsSync(resultsPath)) {
                  try {
                    const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
                    message += `Analyzed ${results.length} file(s).\n\n`;
                    message += 'Check the workflow logs for detailed results.';
                  } catch (e) {
                    message += 'Check the workflow logs for detailed results.';
                  }
                }
                
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: message
                });
                
                console.log('‚úÖ Posted fallback comment');
                return;
              }
              
              const report = fs.readFileSync(reportPath, 'utf8');
              
              if (!report || report.trim().length === 0) {
                console.log('Report file is empty');
                
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: '‚ö†Ô∏è NeuraShield AI analysis completed but generated an empty report. Check workflow logs.'
                });
              } else {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: report
                });
                
                console.log('‚úÖ Successfully posted analysis report');
              }
            } catch (error) {
              console.error('Error posting comment:', error.message);
              
              // Attempt to post error notification
              try {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `‚ùå NeuraShield AI encountered an error: ${error.message}\n\nCheck the workflow logs for more details.`
                });
              } catch (e) {
                console.error('Failed to post error notification:', e.message);
              }
            }
      
      - name: Check for critical issues
        if: steps.changed-files.outputs.any_changed == 'true' && inputs.fail_on_critical
        continue-on-error: true
        run: |
          if [ -f "${{ github.workspace }}/pr_analysis_results.json" ]; then
            cd neurashield-engine
            python .github/scripts/check_critical.py ${{ github.workspace }}/pr_analysis_results.json || true
          else
            echo "‚ö†Ô∏è No results file, skipping critical check"
          fi
      
      - name: Upload analysis artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: neurashield-analysis-results
          path: |
            pr_analysis_results.json
            pr_analysis_report.md
          retention-days: 30
        continue-on-error: true
